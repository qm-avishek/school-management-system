name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18.x'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --quiet --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json

    - name: Install Backend Dependencies
      run: |
        cd backend
        npm install

    - name: Install Frontend Dependencies
      run: |
        cd frontend
        npm install

    - name: Create Environment Files
      run: |
        # Backend environment
        cd backend
        echo "MONGODB_URI=mongodb://localhost:27017/ssgb_college_test" > .env
        echo "JWT_SECRET=test_jwt_secret_key_for_ci_testing_only" >> .env
        echo "PORT=5000" >> .env
        echo "NODE_ENV=test" >> .env
        # Frontend environment
        cd ../frontend        echo "REACT_APP_API_URL=http://localhost:5000/api" > .env
        echo "GENERATE_SOURCEMAP=false" >> .env

    - name: Wait for MongoDB
      run: |
        echo "Waiting for MongoDB to be ready..."
        cd backend
        node scripts/testConnection.js

    - name: Setup Test Database
      run: |
        cd backend
        node scripts/seedAdmin.js

    - name: Lint Backend Code
      run: |
        cd backend
        npx eslint . --ext .js || echo "ESLint not configured, skipping..."

    - name: Lint Frontend Code
      run: |
        cd frontend
        npx eslint src --ext .js,.jsx || echo "ESLint not configured, skipping..."

    - name: Run Backend Tests
      run: |
        cd backend
        npm test || echo "Backend tests not implemented yet"
      env:
        NODE_ENV: test

    - name: Build Frontend
      run: |
        cd frontend
        CI=false npm run build
        
    - name: Test Frontend Build
      run: |
        cd frontend
        ls -la build/
        test -f build/index.html

    - name: Run Frontend Tests
      run: |
        cd frontend
        CI=true npm test -- --coverage --watchAll=false || echo "Frontend tests not implemented yet"

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install Dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci
    
    - name: Run Security Audit (Backend)
      run: |
        cd backend
        npm audit --audit-level moderate || true
        
    - name: Run Security Audit (Frontend)
      run: |
        cd frontend
        npm audit --audit-level moderate || true

    - name: Check for Secrets
      run: |
        echo "Checking for exposed secrets..."
        ! grep -r "password\|secret\|key" --include="*.js" --include="*.json" --exclude="package*.json" . || echo "Potential secrets found - please review"

  build-artifacts:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json

    - name: Install Dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: Build Frontend for Production
      run: |
        cd frontend
        echo "REACT_APP_API_URL=/api" > .env
        echo "GENERATE_SOURCEMAP=false" >> .env
        npm run build

    - name: Upload Frontend Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/
        retention-days: 30

    - name: Upload Backend Artifacts  
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: |
          backend/
          !backend/node_modules
          !backend/.env
        retention-days: 30

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: build-artifacts
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/

    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        vercel-args: '--prod'
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./frontend

  deploy-backend:
    runs-on: ubuntu-latest
    needs: build-artifacts
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Download Backend Artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-build
        path: ./

    - name: Deploy to Railway
      uses: bervProject/railway-deploy@main
      with:
        service: ${{ secrets.RAILWAY_SERVICE_ID }}
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

  deploy-status:
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    if: always()
    
    steps:
    - name: Deployment Status
      run: |
        echo "üöÄ Deployment Summary"
        echo "==================="
        echo "Frontend: ${{ needs.deploy-frontend.result }}"
        echo "Backend: ${{ needs.deploy-backend.result }}"
        if [ "${{ needs.deploy-frontend.result }}" == "success" ] && [ "${{ needs.deploy-backend.result }}" == "success" ]; then
          echo "‚úÖ Full deployment successful!"
        else
          echo "‚ùå Deployment issues detected"
        fi
